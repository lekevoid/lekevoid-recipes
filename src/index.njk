---
layout: default
title: LeKevoid's Recipes
path: home
---
<div class="container mx-auto lg:h-screen flex flex-col justify-start items-center">
	{% set recipeslist = collections.recipes %}
    <h1 class="mt-0">
        <strong class="bg-clip-text text-transparent leading-reset bg-gradient-to-r from-blue-800 to-pink-500 pr-1">
            {{ title }}
        </strong>
    </h1>
	<div class="w-full">
		<input type="text" x-model="filters.text" class="w-full mb-6" placeholder="Search recipes..." />
	</div>
	<p x-text="filters.text"></p>
    <div class="grid grid-cols-2 gap-4 sm:grid-cols-3 lg:grid-cols-4 w-full">
        {% for recipe in recipeslist %}
			<div class="card recipe_thumbnail"
				x-init="$watch('filters', updatedFiltersValue => handleFilters(updatedFiltersValue))"
				x-data="thumbnailData({{recipe.data.categories | dump}}, {{recipe.data.ingredients | dump}}, `{{recipe.data.title}}`, filters)"
				x-show="isVisible">
				{% include 'partials/recipe_thumbnail.njk' %}
			</div>
        {% endfor %}
    </div>
	<script>
		document.addEventListener('alpine:init', () => {
			Alpine.data('thumbnailData', (categories=[], ingredients=[], title="", filters) => {
				const recipeSearchableText = `${ingredients.map(i => i.name).join(" ")} ${title}`.replace(/[\W]+/g, " ").toLowerCase();
				const recipeCategories = categories;

				function computeVisible(filters) {
					const filterText = filters.text.toLowerCase();
					const categoriesMatch = !!recipeCategories.find(cat => Object.values(filters.categories).includes(cat));

					const textMatch = (filterText !== '' && recipeSearchableText.includes(filterText) ? true : false);

					// If a category is selected, show only the recipes that also match the search box.
					// If the search box is empty, ignore it and show all recipes in the category.
					if (filters.categories.length === 0 && filterText === "") {
						return true;
					} else if (filters.categories.length > 0 && categoriesMatch) {
						if (filterText === '' || textMatch) {
							return true;
						}
					} else if (filters.categories.length === 0 && textMatch) {
						return true;
					} else {
						return false;
					}
				}

				return {
					visible: true,
					init(){
						this.visible = computeVisible(filters);
					},
					handleFilters(updatedFilters) {
						this.visible = computeVisible(updatedFilters);
					},
					get isVisible() {
						return this.visible;
					},
				}
			})
		})
	</script>
</div>



{# <script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('thumbnail', (categories=[], ingredients=[], title="") => {
			console.log($store.filters);
			console.log(`"${filterText}"`, Object.values($store.filters.categories))

			const searchableText = `${ingredients.map(i => i.name).join(" ")} ${title}`.toLowerCase().replace(/[\W]+/g, " ");
			const _filterText = filterText.toLowerCase();

			const categoriesMatch = !!categories.find(cat => Object.values($store.filters.categories).includes(cat));
			const textMatch = (_filterText !== '' && searchableText.includes(_filterText) ? true : false);

			return {
				get isVisible() {
					// If a category is selected, show only the recipes that also match the search box.
					// If the search box is empty, ignore it and show all recipes in the category.
					if ($store.filters.categories.length > 0 && categoriesMatch) {
						if (_filterText === '' || textMatch) {
							return true;
						}
					}

					if ($store.filters.categories.length === 0) {
						if (_filterText === '' || textMatch) {
							return true;
						}
					}

					return false;
				}
			}
		})
    })
</script> #}
